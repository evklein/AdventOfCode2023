@page "/Day7"
@using System.Text
@inherits ProblemBaseComponent<string, string>

<h3>Day7</h3>

<h5>Answer (A): @answerA</h5>
<h5>Answer (B): @answerB</h5>

@code {
    private int answerA = 0;
    private int answerB = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        string text = @"";
        var sampleText = @"32T3K 765
T55J5 684
JJJJJ 5
32T3J 893
KK677 28
KTJJT 220
QQQJA 483";
        answerA = DoPartA(text);
        answerB = DoPartB(text);
    }

    private int DoPartA(string text)
    {
        Dictionary<Hand, int> handsAndBids = ParseInput(text);
        SortedDictionary<Hand, int> sortedHands = new SortedDictionary<Hand, int>(handsAndBids, new HandComparer());
        return sortedHands.Values.Select((bid, index) => bid * (index + 1)).Sum();
    }

    private int DoPartB(string text)
    {
        Dictionary<Hand, int> handsAndBids = ParseInput(text, true);
        SortedDictionary<Hand, int> sortedHands = new SortedDictionary<Hand, int>(handsAndBids, new HandComparer());
        return sortedHands.Values.Select((bid, index) => bid * (index + 1)).Sum();
    }

    private Dictionary<Hand, int> ParseInput(string text, bool jokersInPlay = false)
    {
        return text.Split("\r\n", StringSplitOptions.TrimEntries)
                   .ToDictionary(
                       line => new Hand(line.Split(" ")[0], jokersInPlay),
                       line => Int32.Parse(line.Split(" ")[1])
                   );
    }

    enum HandType
    {
        HighCard = 0,
        OnePair = 1,
        TwoPair = 2,
        ThreeOfAKind = 3,
        FullHouse = 4,
        FourOfAKind = 5,
        FiveOfAKind = 6
    }

    enum CardType
    {
        Joker = -1,
        Two = 0,
        Three = 1,
        Four = 2,
        Five = 3,
        Six = 4,
        Seven = 5,
        Eight = 6,
        Nine = 7,
        Ten = 8,
        Jack = 9,
        Queen = 10,
        King = 11,
        Ace = 12
    }

    public struct Hand
    {
        string HandString { get; init; }
        List<CardType> CardsInHand { get; init; }
        bool JokersInPlay { get; init; }

        public Hand(string handString, bool jokersInPlay = false)
        {
            HandString = handString;
            CardsInHand = HandString.Select(card =>
            {
                if (card == '2') return CardType.Two;
                if (card == '3') return CardType.Three;
                if (card == '4') return CardType.Four;
                if (card == '5') return CardType.Five;
                if (card == '6') return CardType.Six;
                if (card == '7') return CardType.Seven;
                if (card == '8') return CardType.Eight;
                if (card == '9') return CardType.Nine;
                if (card == 'T') return CardType.Ten;
                if (card == 'J') return jokersInPlay ? CardType.Joker : CardType.Jack;
                if (card == 'Q') return CardType.Queen;
                if (card == 'K') return CardType.King;
                if (card == 'A') return CardType.Ace;
                throw new Exception("Invalid card");
            }).ToList();
            JokersInPlay = jokersInPlay;
        }

        CardType GetCardAtIndexInHand(int index)
        {
            return CardsInHand[index];
        }

        HandType GetHandTypeForJokersPossible()
        {
            if (JokersInPlay && CardsInHand.Contains(CardType.Joker))
            {
                List<CardType> cardsInHandThatAreNotJokers = CardsInHand.Where(c => c != CardType.Joker).ToList();
                int numberOfJokersInHand = CardsInHand.Where(c => c == CardType.Joker).Count();

                if (!cardsInHandThatAreNotJokers.Any()) return HandType.FiveOfAKind; // All jokers edge case

                HandType bestHandOutcome = HandType.HighCard;
                foreach (CardType card in cardsInHandThatAreNotJokers)
                {
                    List<CardType> nextPossibleHand = new(cardsInHandThatAreNotJokers);
                    nextPossibleHand.AddRange(Enumerable.Repeat(card, numberOfJokersInHand));
                    HandType nextHandOutcome = GetHandType(nextPossibleHand);
                    bestHandOutcome = nextHandOutcome > bestHandOutcome ? nextHandOutcome : bestHandOutcome;
                }
                return bestHandOutcome;
            }
            else
            {
                return GetHandType();
            }
        }

        HandType GetHandType()
        {
            int numberOfDistinctCardsInHand = CardsInHand.Distinct().Count();
            switch (numberOfDistinctCardsInHand)
            {
                case 5:
                    return HandType.HighCard;
                case 4:
                    return HandType.OnePair;
                case 3:
                    return GetCardCounts().ContainsValue(3) ? HandType.ThreeOfAKind : HandType.TwoPair;
                case 2:
                    return GetCardCounts().ContainsValue(4) ? HandType.FourOfAKind : HandType.FullHouse;
                default:
                    return HandType.FiveOfAKind;
            }
        }

        HandType GetHandType(List<CardType> cardsInHand)
        {
            int numberOfDistinctCardsInHand = cardsInHand.Distinct().Count();
            switch (numberOfDistinctCardsInHand)
            {
                case 5:
                    return HandType.HighCard;
                case 4:
                    return HandType.OnePair;
                case 3:
                    return GetCardCounts(cardsInHand).ContainsValue(3) ? HandType.ThreeOfAKind : HandType.TwoPair;
                case 2:
                    return GetCardCounts(cardsInHand).ContainsValue(4) ? HandType.FourOfAKind : HandType.FullHouse;
                default:
                    return HandType.FiveOfAKind;
            }
        }

        Dictionary<CardType, int> GetCardCounts()
        {
            Dictionary<CardType, int> cardCounts = new Dictionary<CardType, int>();
            for (int i = 0; i < HandString.Length; i++)
            {
                CardType c = GetCardAtIndexInHand(i);
                if (cardCounts.ContainsKey(c))
                {
                    cardCounts[c]++;
                }
                else
                {
                    cardCounts.Add(c, 1);
                }
            }
            return cardCounts;
        }

        Dictionary<CardType, int> GetCardCounts(List<CardType> cardsInHand)
        {
            Dictionary<CardType, int> cardCounts = new Dictionary<CardType, int>();
            for (int i = 0; i < cardsInHand.Count; i++)
            {
                CardType c = cardsInHand[i];
                if (cardCounts.ContainsKey(c))
                {
                    cardCounts[c]++;
                }
                else
                {
                    cardCounts.Add(c, 1);
                }
            }
            return cardCounts;
        }

        public static bool operator >(Hand a, Hand b)
        {
            return a.GetHandTypeForJokersPossible() > b.GetHandTypeForJokersPossible();
        }

        public static bool operator <(Hand a, Hand b)
        {
            return a.GetHandTypeForJokersPossible() < b.GetHandTypeForJokersPossible();
        }

        public static bool operator ==(Hand a, Hand b)
        {
            return a.GetHandTypeForJokersPossible() == b.GetHandTypeForJokersPossible();
        }

        public static bool operator !=(Hand a, Hand b)
        {
            return a.GetHandTypeForJokersPossible() != b.GetHandTypeForJokersPossible();
        }

        public static bool HandAIsStrongerThanB(Hand a, Hand b)
        {
            for (int i = 0; i < a.CardsInHand.Count; i++)
            {
                if (a.GetCardAtIndexInHand(i) == b.GetCardAtIndexInHand(i)) continue;
                return a.GetCardAtIndexInHand(i) > b.GetCardAtIndexInHand(i) ? true : false;
            }

            throw new Exception("Hands are equal"); // Shouldn't hit, if input is valid.
        }
    }

    public class HandComparer : IComparer<Hand>
    {
        public int Compare(Hand a, Hand b)
        {
            if (a == b)
            {
                return Hand.HandAIsStrongerThanB(a, b) ? 1 : -1;
            }
            else
            {
                return a > b ? 1 : -1;
            }
        }
    }
}
