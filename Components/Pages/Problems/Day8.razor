@page "/Day8"
@using System.Text
@inherits ProblemBaseComponent<string, string>
@using System.Numerics;

<h3>Day8</h3>

<h5>Answer (A): @answerA</h5>
<h5>Answer (B): @answerB</h5>

@code {
    private int answerA = 0;
    private long answerB = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var text = @"";
        var sampleText = @"LR

11A = (11B, XXX)
11B = (XXX, 11Z)
11Z = (11B, XXX)
22A = (22B, XXX)
22B = (22C, 22C)
22C = (22Z, 22Z)
22Z = (22B, 22B)
XXX = (XXX, XXX)";
        answerA = DoPartA(text);
        answerB = DoPartB(text);
    }

    private int DoPartA(string text)
    {
        (string instructions, Node rootNode) = ParseInputPartA(text);

        Node nextNode = rootNode;
        int numberOfSteps = 0;
        int index = 0;

        do
        {
            if (index >= instructions.Length) index = 0;
            nextNode = instructions[index++] switch
            {
                'R' => nextNode.Right,
                'L' => nextNode.Left,
                _ => throw new Exception("Should not happen.")
            };
            numberOfSteps++;
        }
        while (!string.Equals("ZZZ", nextNode.Name));

        return numberOfSteps;
    }

    private long DoPartB(string text)
    {
        (string instructions, List<Node> rootNodes) = ParseInputPartB(text);

        List<Node> replacementNodes = new List<Node>();

        Dictionary<Node, long> nodesAndTheirRequiredNumberOfSteps = new();

        foreach (var node in rootNodes)
        {
            long numberOfSteps = 0;
            int index = 0;
            Node nextNode = node;
            do
            {
                if (index >= instructions.Length) index = 0;
                nextNode = instructions[index++] switch
                {
                    'R' => nextNode.Right,
                    'L' => nextNode.Left,
                    _ => throw new Exception("Should not happen.")
                };
                numberOfSteps++;
            }
            while (!nextNode.Name.EndsWith('Z'));

            nodesAndTheirRequiredNumberOfSteps.Add(node, numberOfSteps);
        }

        // Use LCM to find the lowest common multiple of all the step numbers in the dictionary.
        return nodesAndTheirRequiredNumberOfSteps.Values.Aggregate((a, b) => Math.Abs(a * b) / ((long) BigInteger.GreatestCommonDivisor(new BigInteger(a), new BigInteger(b))));
    }

    #region Parsing
    private (string, Node) ParseInputPartA(string text)
    {
        List<string> lines = text.Split("\r\n", StringSplitOptions.TrimEntries).ToList();
        List<Node> allNodes = ParseNodeList(lines.Skip(1).ToList());
        return (lines[0], allNodes.Where(n => n.Name.Equals("AAA")).Single());
    }

    private (string, List<Node>) ParseInputPartB(string text)
    {
        List<string> lines = text.Split("\r\n", StringSplitOptions.TrimEntries).ToList();
        List<Node> allNodes = ParseNodeList(lines.Skip(1).ToList());
        return (lines[0], allNodes.Where(n => n.Name.EndsWith('A')).ToList());
    }

    private List<Node> ParseNodeList(List<string> lines)
    {
        // First create a list of all nodes
        List<Node> allNodes = lines.Where(line => line.Contains("="))
                                   .Select(line => new Node(line.Substring(0, 3)))
                                   .ToList();
        // Link each node with its children
        foreach (var line in lines.Where(line => line.Contains("=")))
        {
            string parentName = line.Substring(0, 3);
            string leftChildName = line.Substring(7, 3);
            string rightChildName = line.Substring(12, 3);

            Node parentNode = allNodes.Where(n => n.Name.Equals(parentName)).First();
            parentNode.Left = allNodes.Where(n => n.Name.Equals(leftChildName)).First();
            parentNode.Right = allNodes.Where(n => n.Name.Equals(rightChildName)).First();
        }

        return allNodes;
    }
    #endregion

    internal class Node
    {
        public string Name { get; set; } = string.Empty;
        public Node Left { get; set; } = null;
        public Node Right { get; set; } = null;

        Node() {}

        public Node(string name)
        {
            Name = name;
        }
    }
}
